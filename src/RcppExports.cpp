// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bw_rcpp
double bw_rcpp(NumericMatrix x, int sample_limit, double scale_factor);
RcppExport SEXP _KDist_bw_rcpp(SEXP xSEXP, SEXP sample_limitSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type sample_limit(sample_limitSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(bw_rcpp(x, sample_limit, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// euclidean_dist_rcpp
NumericMatrix euclidean_dist_rcpp(NumericMatrix data, double expo);
RcppExport SEXP _KDist_euclidean_dist_rcpp(SEXP dataSEXP, SEXP expoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    rcpp_result_gen = Rcpp::wrap(euclidean_dist_rcpp(data, expo));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernel_rcpp
NumericMatrix gaussian_kernel_rcpp(NumericMatrix data, double bw);
RcppExport SEXP _KDist_gaussian_kernel_rcpp(SEXP dataSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernel_rcpp(data, bw));
    return rcpp_result_gen;
END_RCPP
}
// laplacian_kernel_rcpp
NumericMatrix laplacian_kernel_rcpp(NumericMatrix data, double bw);
RcppExport SEXP _KDist_laplacian_kernel_rcpp(SEXP dataSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(laplacian_kernel_rcpp(data, bw));
    return rcpp_result_gen;
END_RCPP
}
// polynomial_kernel_rcpp
NumericMatrix polynomial_kernel_rcpp(NumericMatrix data, double degree);
RcppExport SEXP _KDist_polynomial_kernel_rcpp(SEXP dataSEXP, SEXP degreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type degree(degreeSEXP);
    rcpp_result_gen = Rcpp::wrap(polynomial_kernel_rcpp(data, degree));
    return rcpp_result_gen;
END_RCPP
}
// e_dist_rcpp
NumericMatrix e_dist_rcpp(NumericMatrix data, Nullable<IntegerVector> group_);
RcppExport SEXP _KDist_e_dist_rcpp(SEXP dataSEXP, SEXP group_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type group_(group_SEXP);
    rcpp_result_gen = Rcpp::wrap(e_dist_rcpp(data, group_));
    return rcpp_result_gen;
END_RCPP
}
// kernel_induced_distance_matrix
arma::mat kernel_induced_distance_matrix(const arma::mat& data, const arma::vec& g, const std::string& type, Nullable<IntegerVector> group_);
RcppExport SEXP _KDist_kernel_induced_distance_matrix(SEXP dataSEXP, SEXP gSEXP, SEXP typeSEXP, SEXP group_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type group_(group_SEXP);
    rcpp_result_gen = Rcpp::wrap(kernel_induced_distance_matrix(data, g, type, group_));
    return rcpp_result_gen;
END_RCPP
}
// hsic_cpp
double hsic_cpp(NumericMatrix x, NumericMatrix y, std::string type, SEXP bw_sexp, double expo, double scale_factor, Nullable<List> group_, bool u_center, bool is_distance);
RcppExport SEXP _KDist_hsic_cpp(SEXP xSEXP, SEXP ySEXP, SEXP typeSEXP, SEXP bw_sexpSEXP, SEXP expoSEXP, SEXP scale_factorSEXP, SEXP group_SEXP, SEXP u_centerSEXP, SEXP is_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw_sexp(bw_sexpSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type group_(group_SEXP);
    Rcpp::traits::input_parameter< bool >::type u_center(u_centerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_distance(is_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(hsic_cpp(x, y, type, bw_sexp, expo, scale_factor, group_, u_center, is_distance));
    return rcpp_result_gen;
END_RCPP
}
// chsic_cpp
double chsic_cpp(const arma::mat& D);
RcppExport SEXP _KDist_chsic_cpp(SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(chsic_cpp(D));
    return rcpp_result_gen;
END_RCPP
}
// matrix_v_center
arma::mat matrix_v_center(arma::mat A);
RcppExport SEXP _KDist_matrix_v_center(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_v_center(A));
    return rcpp_result_gen;
END_RCPP
}
// jhsic_v
double jhsic_v(Rcpp::List x, double cc, std::string type, SEXP bw_sexp, double expo, double scale_factor, Nullable<List> group_);
RcppExport SEXP _KDist_jhsic_v(SEXP xSEXP, SEXP ccSEXP, SEXP typeSEXP, SEXP bw_sexpSEXP, SEXP expoSEXP, SEXP scale_factorSEXP, SEXP group_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw_sexp(bw_sexpSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type group_(group_SEXP);
    rcpp_result_gen = Rcpp::wrap(jhsic_v(x, cc, type, bw_sexp, expo, scale_factor, group_));
    return rcpp_result_gen;
END_RCPP
}
// matrix_u_center
arma::mat matrix_u_center(arma::mat A);
RcppExport SEXP _KDist_matrix_u_center(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_u_center(A));
    return rcpp_result_gen;
END_RCPP
}
// jhsic_u
double jhsic_u(Rcpp::List x, double cc, std::string type, SEXP bw_sexp, double expo, bool scale, double scale_factor, Nullable<List> group_);
RcppExport SEXP _KDist_jhsic_u(SEXP xSEXP, SEXP ccSEXP, SEXP typeSEXP, SEXP bw_sexpSEXP, SEXP expoSEXP, SEXP scaleSEXP, SEXP scale_factorSEXP, SEXP group_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw_sexp(bw_sexpSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type group_(group_SEXP);
    rcpp_result_gen = Rcpp::wrap(jhsic_u(x, cc, type, bw_sexp, expo, scale, scale_factor, group_));
    return rcpp_result_gen;
END_RCPP
}
// rank_list
List rank_list(List x);
RcppExport SEXP _KDist_rank_list(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_list(x));
    return rcpp_result_gen;
END_RCPP
}
// dhsic_fast_rcpp
double dhsic_fast_rcpp(List x_list, String type, SEXP bw, double expo, double scale_factor, Nullable<List> group_);
RcppExport SEXP _KDist_dhsic_fast_rcpp(SEXP x_listSEXP, SEXP typeSEXP, SEXP bwSEXP, SEXP expoSEXP, SEXP scale_factorSEXP, SEXP group_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x_list(x_listSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type group_(group_SEXP);
    rcpp_result_gen = Rcpp::wrap(dhsic_fast_rcpp(x_list, type, bw, expo, scale_factor, group_));
    return rcpp_result_gen;
END_RCPP
}
// mhsic_cpp
List mhsic_cpp(NumericMatrix x, std::string type, SEXP bw_sexp, double expo, double scale_factor);
RcppExport SEXP _KDist_mhsic_cpp(SEXP xSEXP, SEXP typeSEXP, SEXP bw_sexpSEXP, SEXP expoSEXP, SEXP scale_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw_sexp(bw_sexpSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(mhsic_cpp(x, type, bw_sexp, expo, scale_factor));
    return rcpp_result_gen;
END_RCPP
}
// teststatg
double teststatg(int n1, int n2, const arma::mat& kY11, const arma::mat& kY22, const arma::mat& kY12, const arma::mat& G1_11, const arma::mat& G1_12, const arma::mat& G2_22, const arma::mat& G2_21, const arma::vec& S1_1, const arma::vec& S1_2, const arma::vec& S2_1, const arma::vec& S2_2);
RcppExport SEXP _KDist_teststatg(SEXP n1SEXP, SEXP n2SEXP, SEXP kY11SEXP, SEXP kY22SEXP, SEXP kY12SEXP, SEXP G1_11SEXP, SEXP G1_12SEXP, SEXP G2_22SEXP, SEXP G2_21SEXP, SEXP S1_1SEXP, SEXP S1_2SEXP, SEXP S2_1SEXP, SEXP S2_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY11(kY11SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY22(kY22SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY12(kY12SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G1_11(G1_11SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G1_12(G1_12SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G2_22(G2_22SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type G2_21(G2_21SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S1_1(S1_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S1_2(S1_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S2_1(S2_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type S2_2(S2_2SEXP);
    rcpp_result_gen = Rcpp::wrap(teststatg(n1, n2, kY11, kY22, kY12, G1_11, G1_12, G2_22, G2_21, S1_1, S1_2, S2_1, S2_2));
    return rcpp_result_gen;
END_RCPP
}
// teststatl
double teststatl(int n1, int n2, const arma::mat& kY11, const arma::mat& kY22, const arma::mat& kY12, const arma::vec& G1X, const arma::vec& G2X, double S1_1, double S1_2, double S2_1, double S2_2);
RcppExport SEXP _KDist_teststatl(SEXP n1SEXP, SEXP n2SEXP, SEXP kY11SEXP, SEXP kY22SEXP, SEXP kY12SEXP, SEXP G1XSEXP, SEXP G2XSEXP, SEXP S1_1SEXP, SEXP S1_2SEXP, SEXP S2_1SEXP, SEXP S2_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY11(kY11SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY22(kY22SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kY12(kY12SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G1X(G1XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type G2X(G2XSEXP);
    Rcpp::traits::input_parameter< double >::type S1_1(S1_1SEXP);
    Rcpp::traits::input_parameter< double >::type S1_2(S1_2SEXP);
    Rcpp::traits::input_parameter< double >::type S2_1(S2_1SEXP);
    Rcpp::traits::input_parameter< double >::type S2_2(S2_2SEXP);
    rcpp_result_gen = Rcpp::wrap(teststatl(n1, n2, kY11, kY22, kY12, G1X, G2X, S1_1, S1_2, S2_1, S2_2));
    return rcpp_result_gen;
END_RCPP
}
// calculate_partial_aves_cpp
Rcpp::NumericVector calculate_partial_aves_cpp(const arma::mat& full_dist, int min_k, int max_k);
RcppExport SEXP _KDist_calculate_partial_aves_cpp(SEXP full_distSEXP, SEXP min_kSEXP, SEXP max_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type full_dist(full_distSEXP);
    Rcpp::traits::input_parameter< int >::type min_k(min_kSEXP);
    Rcpp::traits::input_parameter< int >::type max_k(max_kSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_partial_aves_cpp(full_dist, min_k, max_k));
    return rcpp_result_gen;
END_RCPP
}
// calculate_partial_aves_cross_cpp
Rcpp::NumericVector calculate_partial_aves_cross_cpp(const arma::mat& full_dist, int min_k, int max_k);
RcppExport SEXP _KDist_calculate_partial_aves_cross_cpp(SEXP full_distSEXP, SEXP min_kSEXP, SEXP max_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type full_dist(full_distSEXP);
    Rcpp::traits::input_parameter< int >::type min_k(min_kSEXP);
    Rcpp::traits::input_parameter< int >::type max_k(max_kSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_partial_aves_cross_cpp(full_dist, min_k, max_k));
    return rcpp_result_gen;
END_RCPP
}
// hsic_recur_cpp
Rcpp::NumericVector hsic_recur_cpp(const arma::mat& full_dist, int min_k, int max_k);
RcppExport SEXP _KDist_hsic_recur_cpp(SEXP full_distSEXP, SEXP min_kSEXP, SEXP max_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type full_dist(full_distSEXP);
    Rcpp::traits::input_parameter< int >::type min_k(min_kSEXP);
    Rcpp::traits::input_parameter< int >::type max_k(max_kSEXP);
    rcpp_result_gen = Rcpp::wrap(hsic_recur_cpp(full_dist, min_k, max_k));
    return rcpp_result_gen;
END_RCPP
}
// chsic_recur_cpp
Rcpp::NumericVector chsic_recur_cpp(const arma::mat& full_dist, int min_k, int max_k);
RcppExport SEXP _KDist_chsic_recur_cpp(SEXP full_distSEXP, SEXP min_kSEXP, SEXP max_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type full_dist(full_distSEXP);
    Rcpp::traits::input_parameter< int >::type min_k(min_kSEXP);
    Rcpp::traits::input_parameter< int >::type max_k(max_kSEXP);
    rcpp_result_gen = Rcpp::wrap(chsic_recur_cpp(full_dist, min_k, max_k));
    return rcpp_result_gen;
END_RCPP
}
// mdd_cpp
SEXP mdd_cpp(NumericMatrix x, SEXP y_sexp, std::string type, SEXP bw_sexp, double expo, double scale_factor, Nullable<IntegerVector> group_x, bool u_center, bool is_distance);
RcppExport SEXP _KDist_mdd_cpp(SEXP xSEXP, SEXP y_sexpSEXP, SEXP typeSEXP, SEXP bw_sexpSEXP, SEXP expoSEXP, SEXP scale_factorSEXP, SEXP group_xSEXP, SEXP u_centerSEXP, SEXP is_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_sexp(y_sexpSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bw_sexp(bw_sexpSEXP);
    Rcpp::traits::input_parameter< double >::type expo(expoSEXP);
    Rcpp::traits::input_parameter< double >::type scale_factor(scale_factorSEXP);
    Rcpp::traits::input_parameter< Nullable<IntegerVector> >::type group_x(group_xSEXP);
    Rcpp::traits::input_parameter< bool >::type u_center(u_centerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_distance(is_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(mdd_cpp(x, y_sexp, type, bw_sexp, expo, scale_factor, group_x, u_center, is_distance));
    return rcpp_result_gen;
END_RCPP
}
// mdd_bootstrap_cpp
NumericVector mdd_bootstrap_cpp(NumericMatrix Dx, NumericMatrix Dy, int n_boot, std::string boot_type);
RcppExport SEXP _KDist_mdd_bootstrap_cpp(SEXP DxSEXP, SEXP DySEXP, SEXP n_bootSEXP, SEXP boot_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Dx(DxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Dy(DySEXP);
    Rcpp::traits::input_parameter< int >::type n_boot(n_bootSEXP);
    Rcpp::traits::input_parameter< std::string >::type boot_type(boot_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(mdd_bootstrap_cpp(Dx, Dy, n_boot, boot_type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KDist_bw_rcpp", (DL_FUNC) &_KDist_bw_rcpp, 3},
    {"_KDist_euclidean_dist_rcpp", (DL_FUNC) &_KDist_euclidean_dist_rcpp, 2},
    {"_KDist_gaussian_kernel_rcpp", (DL_FUNC) &_KDist_gaussian_kernel_rcpp, 2},
    {"_KDist_laplacian_kernel_rcpp", (DL_FUNC) &_KDist_laplacian_kernel_rcpp, 2},
    {"_KDist_polynomial_kernel_rcpp", (DL_FUNC) &_KDist_polynomial_kernel_rcpp, 2},
    {"_KDist_e_dist_rcpp", (DL_FUNC) &_KDist_e_dist_rcpp, 2},
    {"_KDist_kernel_induced_distance_matrix", (DL_FUNC) &_KDist_kernel_induced_distance_matrix, 4},
    {"_KDist_hsic_cpp", (DL_FUNC) &_KDist_hsic_cpp, 9},
    {"_KDist_chsic_cpp", (DL_FUNC) &_KDist_chsic_cpp, 1},
    {"_KDist_matrix_v_center", (DL_FUNC) &_KDist_matrix_v_center, 1},
    {"_KDist_jhsic_v", (DL_FUNC) &_KDist_jhsic_v, 7},
    {"_KDist_matrix_u_center", (DL_FUNC) &_KDist_matrix_u_center, 1},
    {"_KDist_jhsic_u", (DL_FUNC) &_KDist_jhsic_u, 8},
    {"_KDist_rank_list", (DL_FUNC) &_KDist_rank_list, 1},
    {"_KDist_dhsic_fast_rcpp", (DL_FUNC) &_KDist_dhsic_fast_rcpp, 6},
    {"_KDist_mhsic_cpp", (DL_FUNC) &_KDist_mhsic_cpp, 5},
    {"_KDist_teststatg", (DL_FUNC) &_KDist_teststatg, 13},
    {"_KDist_teststatl", (DL_FUNC) &_KDist_teststatl, 11},
    {"_KDist_calculate_partial_aves_cpp", (DL_FUNC) &_KDist_calculate_partial_aves_cpp, 3},
    {"_KDist_calculate_partial_aves_cross_cpp", (DL_FUNC) &_KDist_calculate_partial_aves_cross_cpp, 3},
    {"_KDist_hsic_recur_cpp", (DL_FUNC) &_KDist_hsic_recur_cpp, 3},
    {"_KDist_chsic_recur_cpp", (DL_FUNC) &_KDist_chsic_recur_cpp, 3},
    {"_KDist_mdd_cpp", (DL_FUNC) &_KDist_mdd_cpp, 9},
    {"_KDist_mdd_bootstrap_cpp", (DL_FUNC) &_KDist_mdd_bootstrap_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_KDist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
